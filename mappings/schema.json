{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
	  "dynamic":{
		  "type":"boolean",
		  "description": "whether to use dynamic mappings, default true",
		  "default":true,
		  "enum": [true, false]
	  },
    "properties": {
      "type": "object",
      "patternProperties": {
        "^.*$": {
          "$ref": "#/definitions/esprop"
        }
      }
    }
  },
  "definitions": {
    "esprop": {
      "type": "object",
      "properties": {
        "term_vector": {
          "type": "string",
          "description": "Whether to store the information of the terms generated by the analyzer. ",
          "enum": [
            "no",
            "yes",
            "with_positions",
            "with_offsets",
            "with_positions_offset"
          ]
        },
        "store": {
          "type": "boolean",
          "description": "Whether to store the field value.",
          "examples": [true, false]
        },
        "type": {
          "type": "string",
		  "description": "the type of the field.",
          "enum": [
            "text",
            "keyword",
            "long",
            "integer",
            "short",
            "byte",
            "double",
            "float",
            "half_float",
            "scaled_float",
            "date",
            "date_nanos",
            "boolean",
            "ip",
            "alias",
            "binary",
            "long_range",
            "date_range",
            "ip_range",
            "geo-point",
            "geo-shape",
            "nested"
          ]
        },
        "properties": {
          "type": "object",
          "description": "It provides a way to create sub-fields for an object data type or a nested data type.",
          "patternProperties": {
            "^.*$": {
              "$ref": "#/definitions/esprop"
            }
          }
        },
        "doc_values": {
          "type": "boolean",
          "description": "It stores the same values as `_source`, but in a column-oriented manner. It is designed for sorting and aggregations. The default value is `true`.",
          "examples": [false, true]
        },
        "norm": {
          "type": "boolean",
          "description": "Whether to store the various normalization factors for scoring in query.",
          "examples": [true, false]
        },
        "index": {
          "type": "boolean",
          "description": "Whether to index the field value. ",
          "examples": [true, false]
        },
        "index_option": {
          "type": "string",
          "description": "Options in indexing to provide features in search and highlighting. ",
          "examples": ["docs", "freqs", "positions", "offsets"]
        },
        "index_phrases": {
          "type": "boolean",
          "description": "Whether to provide faster phrase searches in text. ",
          "examples": [false, true],
          "default": false
        },
        "dynamic": {
          "type": "object",
          "description": "Whether new fields will be indexed dynamically. Options are true, false, and strict. The default value is true. The false option will ignore the new field. The strict option will throw an exception.",
          "enum": [false, true, "strict"],
          "default": true
        },
        "index_prefixes": {
          "type": "object",
          "description": "Enables faster prefix searches on text. The default action is disabled.",
          "properties": {
            "min_chars": {
              "type": "integer",
              "examples": [1]
            },
            "max_chars": {
              "type": "integer",
              "examples": [5]
            }
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether to index the field.",
          "examples": [true, false]
        },
        "fielddata": {
          "type": "boolean",
          "description": "Allows you to enable fielddata, which is an in-memory data structure for querying data from the text.",
          "default": false,
          "examples": [true, false]
        },
        "fields": {
          "type": "object",
          "description": "This provides an alternative to index the same field for a different datatype.",
          "properties": {
            "raw": {
              "$ref": "#/definitions/esprop"
            }
          }
        },
        "format": {
          "type": "string",
          "description": "Date format pattern for date string field values. You can customize the format or use one of the built-in formats. The default date format is strict_date_optional_time||epoch_millis. Interested readers can refer to the reference: https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-date-format.html",
          "examples": [
            "yyyy-MM-dd",
            "epoch_millis",
            "epoch_second",
            "date_optional_time",
            "strict_date_optional_time",
            "strict_date_optional_time_nanos",
            "basic_date",
            "basic_date_time",
            "basic_date_time_no_millis",
            "basic_ordinal_date",
            "basic_ordinal_date_time",
            "basic_ordinal_date_time_no_millis",
            "basic_time",
            "basic_time_no_millis",
            "basic_t_time",
            "basic_t_time_no_millis",
            "basic_week_date",
            "strict_basic_week_date",
            "basic_week_date_time",
            "strict_basic_week_date_time",
            "date",
            "strict_date",
            "date_hour",
            "strict_date_hour",
            "date_hour_minute",
            "strict_date_hour_minute",
            "date_hour_minute_second",
            "strict_date_hour_minute_second",
            "date_hour_minute_second_fraction",
            "strict_date_hour_minute_second_fraction",
            "date_time",
            "strict_date_time",
            "date_time_no_millis",
            "strict_date_time_no_millis",
            "hour",
            "strict_hour",
            "hour_minute",
            "strict_hour_minute",
            "hour_minute_second",
            "strict_hour_minute_second",
            "hour_minute_second_fraction",
            "strict_hour_minute_second_fraction",
            "hour_minute_second_millis",
            "strict_hour_minute_second_millis",
            "ordinal_date",
            "strict_ordinal_date",
            "ordinal_date_time",
            "strict_ordinal_date_time",
            "ordinal_date_time_no_millis",
            "strict_ordinal_date_no_millis",
            "time",
            "strict_time",
            "time_no_millis",
            "strict_time_no_millis",
            "t_time",
            "strict_t_time",
            "t_time_no_millis",
            "strict_t_time_no_millis",
            "week_date",
            "strict_week_date",
            "week_date_time",
            "strict_week_date_time",
            "week_date_time_no_millis",
            "strict_week_date_time_no_millis",
            "weekyear",
            "strict_weekyear",
            "weekyear_week",
            "strict_weekyear_week",
            "weekyear_week_day",
            "strict_weekyear_week_day",
            "year",
            "strict_year",
            "year_month",
            "strict_year_month",
            "year_month_day",
            "strict_year_month_day"
          ]
        },
        "ignore_above": {
          "type": "integer",
          "description": "Allows you to set the maximum string length. Strings that are longer than the setting will be skipped, not indexed or stored.",
          "examples": [20]
        },

        "ignore_malformed": {
          "type": "boolean",
          "description": "Allows you to ignore invalid fields and continue indexing. The default value is false, and an exception is thrown.",
          "default": false,
          "examples": [false, true]
        },
        "null_value": {
          "type": "string",
          "description": "Allows you to index fields with a null value.",
          "examples": ["NULL"]
        },
        "similarity": {
          "type": "string",
          "description": "Allows you to change the default scoring algorithm BM25 to classic, Boolean, or others.",
          "default": "BM25",
          "enum": ["BM25", "classic", "boolean"]
        },
        "analyzer": {
          "$ref": "#/definitions/esanalyze",
          "description": "Uses a custom analyzer or non-default analyzer. We can define multi-fields for multiple languages and set analyzers for each sub-field. For asian languages, you should install  kuromoji (japanese), smartcn (chinese), and openkoreantext-analyzer (korean) respectively. "
        },
        "normalizer": {
          "description": "This is used for keyword fields. It processes in the same way as an analyzer. However, it only generates one token. ",
          "$ref": "#/definitions/esanalyze"
        },
        "boost": {
          "type": "number",
          "description": "This provides a way to weight the field value more in the relevance score used in a query. The default boost value is 1.0.",
          "default": 1.0,
          "examples": [1.0, 1.5]
        },
        "position_increment_gap": {
          "type": "integer",
          "description": "This provides a fake gap for terms to separate them to prevent the phrase queries from matching across them. The default gap is 100.",
          "default": 100,
          "examples": [50, 100]
        },
        "search_analyzer": {
          "$ref": "#/definitions/esanalyze",
          "description": "Uses a different analyzer at search time."
        },

        "coerce": {
          "type": "boolean",
          "description": "Allows you to convert a numeric string to a number, or round a floating number to an integer value. The default value is false.",
          "default": false,
          "examples": [false, true]
        },
        "copy_to": {
          "type": "string",
          "description": "Allows you to copy data from multiple fields into a single field so that it can be queried from that field instead."
        }
      }
    },
	"esanalyze":{
    "type": "string",
    "default": "standard",
    "examples": [
      "standard",
      "simple",
      "whitespace",
      "stop",
      "keyword",
      "pattern",
      "arabic",
      "armenian",
      "basque",
      "bengali",
      "brazilian",
      "bulgarian",
      "catalan",
      "cjk",
      "czech",
      "danish",
      "dutch",
      "english",
      "estonian",
      "finnish",
      "french",
      "galician",
      "german",
      "greek",
      "hindi",
      "hungarian",
      "indonesian",
      "irish",
      "italian",
      "latvian",
      "lithuanian",
      "norwegian",
      "persian",
      "portuguese",
      "romanian",
      "russian",
      "sorani",
      "spanish",
      "swedish",
      "turkish",
      "thai",
      "kuromoji",
      "smartcn",
      "openkoreantext-analyzer"
    ]
  }
  }
}
